// ConsoleApplication1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <opencv2/ximgproc.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/xfeatures2d.hpp>
#include <opencv2/xfeatures2d/nonfree.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/cudafeatures2d.hpp>
#include <opencv2/xfeatures2d/cuda.hpp>
#include <opencv2/cudacodec.hpp>
#include <opencv2/cudaimgproc.hpp>
#include <iostream>
#include <stdio.h>
#include <chrono>
#include <vector>
#include <string>

using namespace std;

int main(int argc, char* argv[])
{
	try
	{
		cv::cuda::printCudaDeviceInfo(0);

		cv::Mat src_host = cv::imread("example.png", CV_LOAD_IMAGE_GRAYSCALE);

		cv::cuda::GpuMat dst, src;
		src.upload(src_host);

		auto start = std::chrono::steady_clock::now();
		cv::cuda::threshold(src, dst, 100.0, 255.0, CV_THRESH_BINARY);
		auto accelerated_duration = std::chrono::steady_clock::now() - start;

		cv::Mat result_host;
		dst.download(result_host);
		cv::imshow("Input", src_host);
		cv::imshow("Result", result_host);
		cv::waitKey(0);

		cv::Mat dst_host;

		start = std::chrono::steady_clock::now();
		cv::threshold(src_host, dst_host, 100.0, 255.0, CV_THRESH_BINARY);
		auto host_duration = std::chrono::steady_clock::now() - start;


		cout << "=== Thresholding ===" << endl;
		cout << "Host time: " << std::chrono::duration<float, milli>(host_duration).count() << " ms." << endl;
		cout << "Device time: " << std::chrono::duration<float, milli>(accelerated_duration).count() << " ms." << endl;
		cout << "Speedup: " << std::chrono::duration<float, milli>(host_duration).count() / chrono::duration<float, milli>(accelerated_duration).count() << "x." << endl;

	}
	catch (const cv::Exception& ex)
	{
		std::cout << "Error: " << ex.what() << std::endl;
	}
	return 0;
}
